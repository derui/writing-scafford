#!/bin/bash

CONTENTS_SERVER=writing-host-server
DRAWIO_SERVER=draw-io

set -eu
if [ -x greadlink ]; then
    current_dir=$(dirname $(greadlink -f $0))
else
    current_dir=$(dirname $(readlink -f $0))
fi

# initialize anything
init() {

    echo "Build docker image to writing"
    sudo docker build -t asciidoctor ${current_dir}/asciidoctor-docker/asciidoctor
    sudo docker build -t draw-io ${current_dir}/asciidoctor-docker/draw-io
    echo "Done."
}

# launch contents server.
serve() {
    echo "Launch server hosted generated files."
    echo "'./writing stop' to stop servers."

    stop

    sudo docker run --name=$CONTENTS_SERVER -v ${current_dir}:/documents -d \
         -p 35729:35729 \
         -p 3000:3000 \
         asciidoctor guard -w /mirror -i

    sudo docker run --name=$DRAWIO_SERVER -d -p 8000:8000 draw-io
}

# launch contents server.
serve-pdf() {
    echo "Launch server hosted generated files."
    echo "'./writing stop' to stop servers."

    stop
    
    sudo docker run --name=$CONTENTS_SERVER -v ${current_dir}:/documents -d \
         -p 35729:35729 \
         -p 3000:3000 \
         asciidoctor guard -w /mirror -G /documents/Guardfile_pdf -i

    sudo docker run --name=$DRAWIO_SERVER -d -p 8000:8000 draw-io
}

stop() {
    echo "Stop serving containers"

    for c in $CONTENTS_SERVER $DRAWIO_SERVER; do
        if [ `sudo docker ps -f "name=$c" -q | grep -c ""` -gt 0 ]; then
            sudo docker rm -f $CONTENTS_SERVER
        else
            echo "Not found running container named $c"
        fi
    done

}

# publish documents in public/ and archive as .zip
archive() {
    local archive_file=$1
    if [ "$archive_file" = "" ]; then
        archive_file=published.zip
    fi
    echo "Export and Archive published files to $archive_file"
    build;

    zip -r $archive_file public
    test $? && echo "Finished to export archives."
}

# Install scafford in specified directory
install() {
    local path=$1

    if [ -z "$path" ]; then
        echo "init command must have one argument that is a directory to install"
        exit 1
    fi

    if [ ! -d "$path" ]; then
        echo "init command must have one argument that is a directory to install"
        exit 1
    fi

    echo "Install files to [$path]"
    mkdir -p ${path}/src
    mkdir -p ${path}/public
    mkdir -p ${path}/assets
    cp -f ${current_dir}/src/.gitkeep ${path}/src/.gitkeep
    cp -f ${current_dir}/public/.gitkeep ${path}/public/.gitkeep
    cp -f ${current_dir}/assets/.gitkeep ${path}/assets/.gitkeep
    cp ${current_dir}/writing ${current_dir}/config.ru ${current_dir}/Guardfile* ${path}
    cp ${current_dir}/.gitignore.scafford ${path}/.gitignore
    echo "Done."
}

build() {
    echo "Build document"
    for i in $(ls src); do
        base=$(basename ${i} ".adoc")
        sudo docker run --name=asciidoctor -v ${current_dir}:/documents --rm asciidoctor asciidoctor -r asciidoctor-diagram -o public/${base}.html src/${base}.adoc
    done

    rm -rf ${current_dir}/public/assets
    cp -r ${current_dir}/assets ${current_dir}/public
}

build-pdf() {
    local name=$1
    local theme=$2
    local param=""

    echo "Build document as pdf."
    echo "The asciidoc to build is only the name of document is 'index.adoc'"

    if [ "$name" = "" ]; then
        echo "Specify the name of pdf"
        exit 1
    fi

    if [ ! -e src/index.adoc ]; then
        echo "Not found `src/index.adoc`"
        exit 1
    fi

    if [ "$theme" != "" ]; then
        param="-a pdf-stylesdir=assets/pdf/themes -a pdf-style=$theme -a pdf-fontdir=assets/pdf/fonts"
    fi

    rm -rf ${current_dir}/public/assets
    cp -r ${current_dir}/assets ${current_dir}/public

    sudo docker run --name=asciidoctor -v ${current_dir}:/documents --rm asciidoctor asciidoctor \
         -r asciidoctor-diagram -r asciidoctor-pdf -b pdf $param -o public/${name}.pdf src/index.adoc
}

subcommand() {
    _ls_available_commands() {
        local fs="$(compgen -A function)"

        join <(echo "$fs") <(echo "$__DEFAULT_FUNCTIONS") | grep -v '^_'
    }

    _show_help() {
        echo 'Available commands'
        _ls_available_commands | awk '{print "-", $0}'
        exit 1
    }

    if [ -n "$(_ls_available_commands | awk -v f=$1 'f==$0')" ]; then
        "$@"
    else
        _show_help
    fi
}

__DEFAULT_FUNCTIONS="$(compgen -A function)"

subcommand "$@"
